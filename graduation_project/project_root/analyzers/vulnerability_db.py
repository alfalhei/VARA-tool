class VulnerabilityDatabase:
    @staticmethod
    def get_signatures() -> Dict[str, VulnerabilitySignature]:
        return {
            'sql_injection': VulnerabilitySignature(
                name="SQL Injection",
                patterns=[
                    r"(?i)('\s*OR\s*'1'\s*=\s*'1)",
                    r"(?i)('\s*OR\s*1\s*=\s*1\s*--)",
                    r"(?i)(UNION\s+SELECT\s+NULL)",
                    r"(?i)(SELECT.*FROM.*WHERE.*=.*--)",
                ],
                severity="Critical",
                description="SQL injection vulnerability allowing unauthorized database access",
                impact="Complete database compromise, unauthorized data access/modification",
                cwe_id="CWE-89",
                cvss_score=9.8,
                remediation=[
                    "Use parameterized queries or prepared statements",
                    "Implement strict input validation",
                    "Use ORM frameworks with built-in SQL injection protection",
                ],
                false_positives=[
                    "SQL statements in code comments",
                    "SQL within string literals in code"
                ],
                references=[
                    "https://owasp.org/www-community/attacks/SQL_Injection",
                    "https://cwe.mitre.org/data/definitions/89.html"
                ]
            ),
            # Add more signatures...
        }
